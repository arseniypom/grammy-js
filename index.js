require('dotenv').config();
const {
  Bot,
  GrammyError,
  HttpError,
  Keyboard,
  InlineKeyboard,
} = require('grammy');
const { hydrate } = require('@grammyjs/hydrate');

const moodKeyboard = new Keyboard()
  .text('–•–æ—Ä–æ—à–æ')
  .row()
  .text('–ù–æ—Ä–º–∞–ª—å–Ω–æ')
  .row()
  .text('–ü–ª–æ—Ö–æ')
  .resized();

const moodLabels = ['–•–æ—Ä–æ—à–æ', '–ù–æ—Ä–º–∞–ª—å–Ω–æ', '–ü–ª–æ—Ö–æ'];
const rows = moodLabels.map((label) => [Keyboard.text(label)]);
const moodKeyboard2 = Keyboard.from(rows).resized();

const inlineKeyboard = new InlineKeyboard()
  .pay('1', 'button-1')
  .text('2', 'button-2')
  .text('3', 'button-3');

const shareKeyboard = new Keyboard()
  .requestLocation('–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è')
  .requestContact('–ö–æ–Ω—Ç–∞–∫—Ç')
  .requestPoll('–û–ø—Ä–æ—Å')
  .placeholder('–Ø —Ö–æ—á—É –ø–æ–¥–µ–ª–∏—Ç—å—Å—è...')
  .resized();

const menuKeyboard = new InlineKeyboard()
  .text('–£–∑–Ω–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞', 'order-status')
  .text('–û–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É', 'support');
const backKeyboard = new InlineKeyboard().text('< –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', 'back');

const bot = new Bot(process.env.BOT_API_KEY);
bot.use(hydrate());

bot.command('menu', async (ctx) => {
  await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é', {
    reply_markup: menuKeyboard,
  });
});

bot.callbackQuery('order-status', async (ctx) => {
  // await ctx.callbackQuery.message.editText('–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞: –í –ø—É—Ç–∏', {
  //   reply_markup: backKeyboard,
  // });
  await ctx.api.editMessageText(
    ctx.chat.id,
    ctx.update.callback_query.message.message_id,
    '–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞: –í –ø—É—Ç–∏',
    {
      reply_markup: backKeyboard,
    },
  );
  await ctx.answerCallbackQuery();
});

bot.callbackQuery('support', async (ctx) => {
  await ctx.callbackQuery.message.editText('–ù–∞–ø–∏—à–∏—Ç–µ –í–∞—à –≤–æ–ø—Ä–æ—Å', {
    reply_markup: backKeyboard,
  });
  await ctx.answerCallbackQuery();
});

bot.callbackQuery('back', async (ctx) => {
  await ctx.callbackQuery.message.editText('–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é', {
    reply_markup: menuKeyboard,
  });
  await ctx.answerCallbackQuery();
});

bot.command('start', async (ctx) => {
  await ctx.react('üëç');
  await ctx.reply('–ü—Ä–∏–≤–µ—Ç! –Ø - –ë–æ—Ç ü§ñ');
});

bot.command('keyboard', async (ctx) => {
  await ctx.reply('–ö–∞–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ?', {
    reply_markup: moodKeyboard2,
  });
});

bot.command('inline_keyboard', async (ctx) => {
  await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ —Ü–∏—Ñ—Ä—É', {
    reply_markup: inlineKeyboard,
  });
});

bot.callbackQuery(/button-[1-3]/, async (ctx) => {
  await ctx.reply(`–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ ${ctx.callbackQuery.data}`);
  await ctx.answerCallbackQuery();
});

// bot.on('callback_query:data', async (ctx) => {
//   await ctx.reply(`–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ ${ctx.callbackQuery.data}`);
//   await ctx.answerCallbackQuery();
// });

bot.command('share', async (ctx) => {
  await ctx.reply('–ö–∞–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏ —Ö–æ—á–µ—à—å –ø–æ–¥–µ–ª–∏—Ç—å—Å—è?', {
    reply_markup: shareKeyboard,
  });
});

bot.on(':location', async (ctx) => {
  await ctx.reply('–°–ø–∞—Å–∏–±–æ –∑–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é!');
});
bot.on(':contact', async (ctx) => {
  await ctx.reply('–°–ø–∞—Å–∏–±–æ –∑–∞ –∫–æ–Ω—Ç–∞–∫—Ç!');
});

bot.hears('–•–æ—Ä–æ—à–æ', async (ctx) => {
  await ctx.reply('–†–∞–¥ —Å–ª—ã—à–∞—Ç—å!');
});

bot.on('message', async (ctx) => {
  console.log(ctx.from);
  await ctx.reply(
    '–ü—Ä–∏–≤–µ—Ç! –ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ <a href="https://t.me/pomazkovjs">—Ç–µ–ª–µ–≥—Ä–∞–º-–∫–∞–Ω–∞–ª</a> pomazkov.js',
    {
      parse_mode: 'HTML',
      disable_web_page_preview: true,
    },
  );
});

bot.catch((err) => {
  const ctx = err.ctx;
  console.error(`Error while handling update ${ctx.update.update_id}:`);
  const e = err.error;
  if (e instanceof GrammyError) {
    console.error('Error in request:', e.description);
  } else if (e instanceof HttpError) {
    console.error('Could not contact Telegram:', e);
  } else {
    console.error('Unknown error:', e);
  }
});

bot.start();
