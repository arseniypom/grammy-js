"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.installMessageMethods = void 0;
function installMessageMethods(api, message) {
    const methods = {
        forward: (chat_id, other, signal) => api.forwardMessage({
            chat_id,
            from_chat_id: message.chat.id,
            message_id: message.message_id,
            ...other,
        }, signal),
        copy: (chat_id, other, signal) => api.copyMessage({
            chat_id,
            from_chat_id: message.chat.id,
            message_id: message.message_id,
            ...other,
        }, signal),
        delete: (signal) => api.deleteMessage({
            chat_id: message.chat.id,
            message_id: message.message_id,
        }, signal),
        editReplyMarkup: (reply_markup, signal) => api.editMessageReplyMarkup({
            chat_id: message.chat.id,
            message_id: message.message_id,
            reply_markup,
        }, signal),
        editText: (text, other, signal) => api.editMessageText({
            chat_id: message.chat.id,
            message_id: message.message_id,
            text,
            ...other,
        }, signal),
        editLiveLocation: (latitude, longitude, other, signal) => api.editMessageLiveLocation({
            chat_id: message.chat.id,
            message_id: message.message_id,
            latitude,
            longitude,
            ...other,
        }, signal),
        stopLiveLocation: (other, signal) => api.stopMessageLiveLocation({
            chat_id: message.chat.id,
            message_id: message.message_id,
            ...other,
        }, signal),
        editCaption: (caption, other, signal) => api.editMessageCaption({
            chat_id: message.chat.id,
            message_id: message.message_id,
            caption,
            ...other,
        }, signal),
        editMedia: (media, other, signal) => api.editMessageMedia({
            chat_id: message.chat.id,
            message_id: message.message_id,
            media,
            ...other,
        }, signal),
        react: (reaction, other, signal) => api.setMessageReaction({
            chat_id: message.chat.id,
            message_id: message.message_id,
            reaction: typeof reaction === "string"
                ? [{ type: "emoji", emoji: reaction }]
                : (Array.isArray(reaction) ? reaction : [reaction])
                    .map((emoji) => typeof emoji === "string"
                    ? { type: "emoji", emoji }
                    : emoji),
            ...other,
        }, signal),
        getCustomEmojiStickers: async (signal) => {
            var _a;
            const entities = (_a = message.entities) !== null && _a !== void 0 ? _a : message.caption_entities;
            if (entities === undefined || entities.length === 0)
                return [];
            const identifiers = entities
                .filter((e) => e.type === "custom_emoji")
                .map((e) => e.custom_emoji_id);
            return await api.getCustomEmojiStickers({ custom_emoji_ids: identifiers }, signal);
        },
    };
    Object.assign(message, methods);
}
exports.installMessageMethods = installMessageMethods;
